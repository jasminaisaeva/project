// - Expense  project start with figma
// - components in detail
// - state
// - component rerender
// ExpensesItem => Expenses-Item

// Компонент чакырганда - бир эле жолу рендер болот.
// компоненттин домго кируусун рендер деп аталат.

// Компонентти экинчи жолу рендер кылуу учун - состояние/state керек.

// 1.useState - бул хук,то есть встроенная функ реакта.
// Массив кайтарат эки элементтен турган - [state,setState] = useState(asdf)

// 2.setState - функция асинхронно иштейт.
//3.Бир компонеттен несколько useState колдонсо болот.
// 4.state - озгоргон сайын - компонент кайра кайра рендер боло берет.

// 5.Events - события js кандай болсо, реакта да ошондой эле.

// Значениялар озгоруп жатканда окшош болсо - компонент рендер болбойт.
// {}
// []




// Lesson 4
// render, re-render
// each component has own state (render only this comp)
// state batching
// lifting up
// children,key


// state batching - бир учурда коп состоянияны бир рендер менен озгортуу.Одним разом обновлять состояние.
// Бирок state'тердин арасында асинх код бар болсо, эки же андап коп рендер менен озгортот.

// lifting up - дочерний компоненттен родительге данныйды которуу.
// two way data binding - input value/onChange .Бир эле учурда состоянияны озгортуп
// жана ошгорткон состоянияны value катары берилсе.

// App.js уч доч компонен бар, ошолордун бироосун озгорсо калган комп рендер болобу?

// Корневой компонент сост озгорсо- ал компоненттин баардык балдары да рендер болот

// React тын состояниясы временный экен, браузерди рефреш кылгычакты жасайт.










// Lesson5 - Git

// Git - version control system (VCS)
// Github
// branches
// commit, push
// local and remote branches.
// react gh-pages/deploy

// Git:
// 1.Коп адардардын проекте иштосуу
// 2.Система контроля версиями

// Git - инструмент, позволяющий реализовать/контролировать версию проекта.
// GitHub - сервис для проектов, использующих Git.
// GitHub - Git'тин эле hosted версиясы.Бир серверден размещенный, иштеп тураган версиясы.

// git checkout -b nameBranch - открывает нов ветку и переходит на нее.
// git checkout nameBranch - просто переходит.
// git branch - выводит список всех веток.
// * - текущая ветка.
// git status -
// git commit -m "updated" - описать что ты изменил.
// git pull origin master - удал master веткадан, озгорууну алуу.
